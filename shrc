# Path

# Neovim
#NVIM_0

# Go
#GO_0
#GO_1
#GO_2
#GO_3
#GO_4

# Zig
#ZIG_0

# Flutter
#FLUTTER_0
#FLUTTER_1
#FLUTTER_2
#FLUTTER_3
#FLUTTER_4

# Rust
#RUST_0

# AWS
function activate_aws(){
    if [[ -f /usr/local/bin/aws && -f ~/.aws/config ]]; then
        :
        # AWS cli
        #AWS_0
        #AWS_1
        #AWS_2
        #AWS_3

        # AWS creds
        export AWS_USER=terraform
        export AWS_ACCESS_KEY_ID=$(aws configure export-credentials --profile $AWS_USER | jq -r .AccessKeyId)
        export AWS_SECRET_ACCESS_KEY=$(aws configure export-credentials --profile $AWS_USER | jq -r .SecretAccessKey)
    fi
}

# Android SDK path
#ANDROID_0
#ANDROID_1
#ANDROID_2
#ANDROID_3
#ANDROID_4
#ANDROID_5

# ASDF path for erlang
if [[ $(echo $0) == "/usr/bin/zsh" ]]; then
    :
    #ASDF_0
    #ASDF_1
    #ASDF_2
fi

# Erlang erl shell args
#ERL_0

# ARDUINO_CLI path
#ARDUINO_CLI_0
# ARDUINO V2 path
#ARDUINO_V2_0

# fly.io - flyctl
#FLYCTL_0
#FLYCTL_1

# Terraform
if [[ $(echo $0) == "/usr/bin/zsh" ]]; then
    :
    #TERRAFORM_0
    #TERRAFORM_1
fi

# k8s
#KUBE_EDITOR

# Etc
export PATH=$PATH:/snap/bin
export PATH=$PATH:$HOME/.local/bin
export PATH=$PATH:$HOME/.local/share/JetBrains/Toolbox/bin

export PICO_SDK_PATH=$HOME/pico/pico-sdk

# kubectl auto completion
if [[ $(echo $0) == "/usr/bin/zsh" ]]; then
    if [[ -f /usr/local/bin/kubectl ]]; then
        source <(kubectl completion zsh)
    fi
fi

# =============================
# Aliases
alias c='clear'
alias cl='clear'
alias ud='sudo apt update && sudo apt list --upgradable'
alias ug='sudo apt upgrade'
alias update='sudo apt update && sudo apt list --upgradable'
alias upgrade='sudo apt upgrade'
alias autoremove='sudo apt autoremove'
alias poweroff='sudo poweroff'
alias fix-broken='sudo apt --fix-broken install'

alias re='cd ~/repo'
alias hw='cd ~/repo/headless'
alias dw='cd ~/repo/headless/desktop'
alias sw='cd ~/repo/headless/desktop/sway'
alias qw='cd ~/repo/headless/desktop/lxqt'
alias ds='cd ~/repo/docs'

alias gw='cd ~/repo/gows'
alias er='cd ~/repo/erlangws'
alias el='cd ~/repo/elixirws'
alias lx='elixir'

alias rw='cd ~/repo/rustws'
alias zl='cd ~/repo/zigws'
alias zb='zig build'
alias zrm='zig run src/main.zig'
alias ztm='zig test src/main.zig'

alias fw='cd ~/repo/fltws'
alias jw='cd ~/repo/jsws'

alias iw='cd ~/repo/iac-workspace'
alias bw='cd ~/repo/blog'
alias cl='cd ~/repo/cloud'
alias aw='cd ~/repo/algorithms'
alias lw='cd ~/repo/leetcode'

#alias tp='cat /sys/class/thermal/thermal_zone0/temp'
alias tp='watch sensors'
alias tm='tmux'
alias tmk=tmkillall
function tmkillall(){
    tmux list-sessions | grep -v attached | awk 'BEGIN{FS=":"}{print $1}' | xargs -n 1 tmux kill-session -t || echo 'No sessions to kill'
}

alias av1='avahi-resolve -n -4 rpi3.local'
alias am='minicom -b 115200 -o -D /dev/ttyUSB0'
alias an='minicom -b 9600 -o -D /dev/ttyACM0'

alias eval-ssh-agent='eval "$(ssh-agent -s -t 12h)"'

alias disk620='sshfs bus710@disk620:/ ~/disk620'
alias disk87='sshfs bus710@r02:/home/bus710/shared ~/disk87'

alias nv='nvim'
alias nvc='cd ~/.config/nvim && pwd'
alias rr='ranger'
alias ll='ls -la'
alias nf='echo "neofetch" && neofetch'
alias ff='echo "fastfatch" && fastfetch'
alias sp='spf'
alias lg='lazygit'

alias gp='git pull origin HEAD'
alias gf='git fetch --dry-run -v'
alias gfp='git fetch && git pull origin HEAD'
alias gprls="git ls-remote origin 'pull/*/head'"
alias git-log-oneline-color-less="git log --oneline --color=always | less"
alias git-log-pretty-color-less="git log --pretty --color=always | less"
alias git-log-graph-color-less="git log --graph --color=always | less"
alias git-pull-all-remote-branches="git-pull-all-remote-branches-function"
alias git-show-current-hash='git show -s --format=%H'

alias go-export="export GOPROXY=direct; export GOSUMDB=off; export GO111MODULE=on"
# go mod tidy

alias goserve="echo \"waiting at 8080\" && gommand 'http.Handle(\"/\", http.FileServer(http.Dir(\".\"))); fmt.Println(http.ListenAndServe(\":8080\", nil))'"

alias code="code --enable-features=UserOzonePlatform --ozone-platform=wayland . 2> /dev/null"
alias insider="code-insiders ."

alias dk="docker"
alias mink="minikube"
alias k="kubectl"
alias hl="helm"
alias skl="source <(kubectl completion zsh)"
alias pl="pulumi"

alias gcloud-auth-qaus="gcloud container clusters get-credentials connect-qa-gcp-01 --region us-central1 --project connect-qaus-k8s-e004"

alias cp-zig-vscode="rm -rf .vscode && mkdir .vscode && cp -r /home/$LOGNAME/repo/headless/sdk/zig/zig-vscode/* .vscode/"

alias get_idf=". $HOME/esp/esp-idf/export.sh"
alias idf="idf.py"

alias cargo-upgrade-incompatible="cargo upgrade --incompatible"
alias cargo-watch-x-run="cargo watch -x 'run'"

alias node-scaffolding="/home/$LOGNAME/repo/headless/sdk/js/node-scaffolding.sh"
alias react-scaffolding="/home/$LOGNAME/repo/headless/sdk/js/react-scaffolding.sh"
alias svelte-scaffolding="/home/$LOGNAME/repo/headless/sdk/js/sv-scaffolding.sh"
alias sveltekit-scaffolding="/home/$LOGNAME/repo/headless/sdk/js/sk-scaffolding.sh"

alias tauri-scaffolding="/home/$LOGNAME/repo/headless/sdk/tauri/tauri-scaffolding.sh"
alias elx-scaffolding="/home/$LOGNAME/repo/headless/sdk/otp/elx-scaffolding.sh"
alias phx-scaffolding="/home/$LOGNAME/repo/headless/sdk/otp/phx-scaffolding.sh"
alias phx-scaffolding-api="/home/$LOGNAME/repo/headless/sdk/otp/phx-scaffolding-api.sh"
alias phx-restore="/home/$LOGNAME/repo/headless/sdk/otp/phx-restore.sh"

alias tf="terraform"
alias tf-scaffolding="cat /home/$LOGNAME/repo/headless/infra/main.tf >> main.tf"

alias ac="arduino-cli"
alias hq="harlequin"

alias cool="sudo bash -c \"echo level 0 > /proc/acpi/ibm/fan > /dev/null \""

alias cpu-options="grep . /sys/devices/system/cpu/cpu0/cpufreq/*"
alias cpu-low="echo 3000000 | sudo tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_max_freq > /dev/null"
alias cpu-check="grep . /sys/devices/system/cpu/cpu*/cpufreq/scaling_max_freq"
alias fan0="sudo bash -c \"echo level 0 > /proc/acpi/ibm/fan\""
alias fan1="sudo bash -c \"echo level 1 > /proc/acpi/ibm/fan\""
alias fan-auto="sudo bash -c \"echo level auto > /proc/acpi/ibm/fan \""
alias fan-auto-tp="restart-thinkfan"
alias fan-check="cat /proc/acpi/ibm/fan"
alias cal="ncal -b -A2"
alias aaw=activate_aws

alias swaywm-start="exec sway"
alias cinnamon-start="startx; cinnamon-session"
# eval $(keychain --eval --quite $PRIVATE_KEY)

alias rn="restart-networking"
alias rk="restart-keyring"
alias rt="restart-thinkfan"

# =============================
# Cheatsheets

git-pull-all-remote-branches-function()
{
    git branch -r | grep -v '\->' | while read remote;
    do git branch --track "${remote#origin/}" "$remote"; done
    git fetch --all
    git pull --all
}

git-fetch-reset-target()
{
    echo "git fetch --all"
    echo "git reset --hard origin/main"
}


cmd-gcp () {
    echo "gcloud-auth-qaus"
    echo
    echo "API_SERVER=\$(kubectl -n migration get pods | grep api | grep Running | awk -F \" \" '{print \$1}'); echo \$API_SERVER";
    echo "kubectl -n migration get pods"
    echo "kubectl -n migration logs -f \$API_SERVER | grep 'abc'";
    echo "kubectl -n migration exec -it \$API_SERVER -- sh";
    echo "kubectl -n migration describe pod \$API_SERVER";
    echo "kubectl -n migration delete pod \$API_SERVER";
    echo
    echo "API_SERVER_DEV=\$(kubectl -n migration-dev get pods | grep api | grep Running | awk -F \" \" '{print \$1}'); echo \$API_SERVER_DEV";
    echo "kubectl -n migration-dev get pods"
    echo "kubectl -n migration-dev logs -f \$API_SERVER_DEV | grep 'abc'";
    echo "kubectl -n migration-dev exec -it \$API_SERVER_DEV -- sh";
    echo "kubectl -n migration-dev describe pod \$API_SERVER_DEV";
    echo "kubectl -n migration-dev delete pod \$API_SERVER_DEV";
}

cmd-git () {
    echo "git log --color=always --follow -p -- \$FILE or \$DIR"
}

cmd-phoenix () {
    echo "Install Phoenix"
    echo "- mix archive.install hex phx_new"
    echo "Create & run a Phoenix app"
    echo "- mix phx.new hello"
    echo "- cd hello"
    echo "- mix ecto.create # after editing config/dev.exs"
    echo "- mix deps.get"
    echo "- mix phx.server"
}

cmd-kubectl () {
    echo "k3s, minikube(mink), kubectl(kl)"
    echo
    echo "k3s (or mink) start"
    echo "k3s (or mink) status"
    echo "k3s (or mink) stop"
    echo
    echo "kl config use-context k3s (ok minikube)"
    echo "kl get nodes"
    echo "skl => source <(kubectl completion zsh)"
}


kitty-ssh-troubleshoot () {
    # https://sw.kovidgoyal.net/kitty/faq/#i-get-errors-about-the-terminal-being-unknown-or-opening-the-terminal-failing-when-sshing-into-a-different-computer
    echo "kitty +kitten ssh \${SERVER}"
}

restart-networking () {
    echo -e "\e[91m"
    echo "Restart networking daemon"
    echo -e "\e[39m"
    echo

    sudo systemctl restart networking.service
}

restart-keyring () {
    echo -e "\e[91m"
    echo "Restart keyring daemon"
    echo -e "\e[39m"
    echo

    systemctl enable --now --user gnome-keyring-daemon
    systemctl status --user gnome-keyring-daemon --no-pager | grep -A2 CGroup
}

stop-keyring () {
    echo -e "\e[91m"
    echo "Stop keyring daemon"
    echo -e "\e[39m"
    echo

    systemctl stop --now --user gnome-keyring-daemon
    systemctl status --user gnome-keyring-daemon --no-pager | grep -A2 CGroup
}

restart-thinkfan() {
    echo -e "\e[91m"
    echo "Restart thinkfan daemon"
    echo -e "\e[39m"
    echo

    sudo systemctl restart thinkfan.service
}

restart-audio () {
    AUDIO_DEVICE=$(lspci | grep Audio)
    echo -e "\e[91m"
    echo "Restart audio"
    echo "$AUDIO_DEVICE"
    echo -e "\e[39m"
    echo

    #sudo touch /usr/share/pipewire/media-session.d/with-pulseaudio
    #systemctl --user restart pipewire-session-manager

    systemctl --user start pulseaudio
    pulseaudio --start
    pavucontrol
}

restart-container(){
    docker container restart $1
    docker container inspect $1 | grep Status
}

cp-elixir-vscode-launch-json(){
    rm -rf ./.vscode
    cp -r ~/repo/headless/sdk/otp/vscode ./.vscode
}

npm-create-react-ts(){
    echo "npm create vite@latest $1 -- --template react-ts"
    npm create vite@latest $1 -- --template react-ts
}

npm-commands(){
    echo "npm init -y"
    echo "npm run dev"
    echo
    echo "npm create vite@latest $APP_NAME -- --template react-ts|svelte"
    echo "npm run dev -- --host --open"
    echo
    echo "npm-create-react-ts $APP_NAME"
}

# For gotk4
export ASSUME_NO_MOVING_GC_UNSAFE_RISK_IT_WITH=go1.19

# For swaywm ssh socket
#SSH_AUTH_SOCK

# For swaywm screen sharing
export XDG_CURRENT_DESKTOP=sway
export XDG_RUNTIME_DIR=/run/user/$(id -u)
